// @ts-nocheck
import { expect } from "chai";
import Ex1 from "../exercitii-test.js";

const myObj = new Ex1();

describe("Teste speciale pentru mutanti Stryker", function () {

  // ğŸ§ª 1. IniÈ›ializare valori statice
  it("IniÈ›ializare corectÄƒ a valorilor statice", function () {
    expect(Ex1.rezultat_corect1).to.equal(-100000);
    expect(Ex1.rezultat_corect2).to.equal(-100000);
    expect(Ex1.rezultat_corect3).to.equal(-100000);
  });

  // ğŸ§ª 2. Nu se reintrÄƒ pe iniÈ›ializare dacÄƒ rezultatul e deja setat
  it("Skip initializare rezultat_corect cÃ¢nd e deja setat", function () {
    Ex1.rezultat_corect3 = 999;
    const [a, b] = myObj.rezolvare(2, 1, 3);
    myObj.verificare(2, 1, 3, a, b); // nu reintrÄƒ Ã®n if
  });

  // ğŸ§ª 3. VerificÄƒ rÄƒspuns corect È™i greÈ™it
  it("RÄƒspuns corect: a === a_corect È™i b === b_corect", function () {
    const [a, b] = myObj.rezolvare(2, 1, 3);
    const result = myObj.verificare(2, 1, 3, a, b);
    expect(result).to.equal("RÄƒspuns corect!");
  });

  it("RÄƒspuns greÈ™it: a, b greÈ™ite â†’ ramura else", function () {
    Ex1.rezultat_corect1 = 1;
    Ex1.rezultat_corect2 = 2;
    Ex1.rezultat_corect3 = 3;
    Ex1.count = 1;
    const result = myObj.verificare(2, 1, 3, 0, 0);
    expect(result).to.include("RÄƒspuns greÈ™it");
  });

  // ğŸ§ª 4. CondiÈ›ii din rezolvare
  it("CondiÈ›ia c < 2 - true È™i false", function () {
    expect(myObj.rezolvare(1, 1, 4)).to.deep.equal(["input invalid", null]); // true
    expect(myObj.rezolvare(2, 1, 4)).to.not.deep.equal(["input invalid", null]); // false
  });

  it("CondiÈ›ia d <= r - true È™i false", function () {
    expect(myObj.rezolvare(3, 3, 2)).to.deep.equal(["input invalid", null]); // true
    expect(myObj.rezolvare(3, 1, 5)).to.not.deep.equal(["input invalid", null]); // false
  });

  it("CondiÈ›ia r < 0 - true È™i false", function () {
    expect(myObj.rezolvare(3, -1, 5)).to.deep.equal(["input invalid", null]); // true
    expect(myObj.rezolvare(4, 0, 6)).to.not.deep.equal(["input invalid", null]); // false
  });

  it("CondiÈ›ia (d - r) % (c - 1) !== 0 - true È™i false", function () {
    expect(myObj.rezolvare(4, 1, 8)).to.deep.equal(["input invalid", null]); // true
    expect(myObj.rezolvare(4, 1, 7)).to.not.deep.equal(["input invalid", null]); // false
  });

  it("CondiÈ›ia d / c <= r - true È™i false", function () {
    expect(myObj.rezolvare(3, 6, 8)).to.deep.equal(["input invalid", null]); // true
    expect(myObj.rezolvare(4, 1, 7)).to.not.deep.equal(["input invalid", null]); // false
  });

  // ğŸ§ª 5. IniÈ›ializare rezultat_corect
  it("ActiveazÄƒ logica de iniÈ›ializare rezultat_corect", function () {
    Ex1.rezultat_corect3 = -100000;
    myObj.verificare(2, 1, 3, 5, 2);
    expect(Ex1.rezultat_corect3).to.equal(5);
    expect(Ex1.rezultat_corect2).to.equal(5);
    expect(Ex1.rezultat_corect1).to.equal(5);
  });

  // ğŸ§ª 6. count !== 1 â†’ true
  it("Ex1.count !== 1 este true", function () {
    Ex1.count = 0;
    Ex1.rezultat_corect1 = 1;
    Ex1.rezultat_corect2 = 2;
    Ex1.rezultat_corect3 = 3;

    myObj.verificare(2, 1, 3, 0, 0);
    expect(Ex1.count).to.equal(1); // resetat
  });

  // ğŸ§ª 7. count !== 1 â†’ false
  it("Ex1.count !== 1 este false", function () {
    Ex1.count = 1;
    Ex1.rezultat_corect1 = 1;
    Ex1.rezultat_corect2 = 2;
    Ex1.rezultat_corect3 = 3;

    myObj.verificare(2, 1, 3, 0, 0);
    expect(Ex1.count).to.equal(1); // neschimbat
  });

  // ğŸ§ª 8. Toate rezultate egale
  it("Toate rezultate egale", function () {
    Ex1.count = 0;
    Ex1.rezultat_corect1 = 9;
    Ex1.rezultat_corect2 = 9;
    Ex1.rezultat_corect3 = 9;

    myObj.verificare(2, 1, 3, 0, 0);
    expect(Ex1.count).to.equal(1); // incrementat
  });

  // ğŸ§ª 9. DouÄƒ egale
  it("DouÄƒ egale, unul diferit", function () {
    Ex1.count = 0;
    Ex1.rezultat_corect1 = 9;
    Ex1.rezultat_corect2 = 9;
    Ex1.rezultat_corect3 = 8;

    myObj.verificare(2, 1, 3, 0, 0);
    expect(Ex1.count).to.equal(1); // incrementat
  });

  // ğŸ§ª 10. Toate diferite
  it("Toate diferite", function () {
    Ex1.count = 2;
    Ex1.rezultat_corect1 = 5;
    Ex1.rezultat_corect2 = 6;
    Ex1.rezultat_corect3 = 7;

    myObj.verificare(2, 1, 3, 0, 0);
    expect(Ex1.count).to.equal(1); // resetat
  });
});
