{"files":{"exercitii-test.mjs":{"language":"javascript","mutants":[{"id":"4","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","68","69","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":18,"line":23},"start":{"column":13,"line":23}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","68","69","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":6,"line":33},"start":{"column":24,"line":11}}},{"id":"5","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":65,"coveredBy":["42","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","68","69","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":18,"line":23},"start":{"column":13,"line":23}}},{"id":"6","mutatorName":"EqualityOperator","replacement":"c <= 2","statusReason":"expected 'input invalid' to equal 5","status":"Killed","static":false,"testsCompleted":3,"killedBy":["45"],"coveredBy":["42","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","68","69","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":18,"line":23},"start":{"column":13,"line":23}}},{"id":"7","mutatorName":"EqualityOperator","replacement":"c >= 2","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","68","69","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":18,"line":23},"start":{"column":13,"line":23}}},{"id":"8","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected [] to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","50","53","72","73","74","78","79","81","96","98","103","108","109","110","111"],"location":{"end":{"column":50,"line":23},"start":{"column":27,"line":23}}},{"id":"9","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected [ '', null ] to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","50","53","72","73","74","78","79","81","96","98","103","108","109","110","111"],"location":{"end":{"column":43,"line":23},"start":{"column":28,"line":23}}},{"id":"10","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","68","69","75","76","77","80","82","83","84","85","86","87","88","89","90","91","92","93","94","95","97","99","100","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":19,"line":24},"start":{"column":13,"line":24}}},{"id":"11","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","68","69","75","76","77","80","82","83","84","85","86","87","88","89","90","91","92","93","94","95","97","99","100","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":19,"line":24},"start":{"column":13,"line":24}}},{"id":"12","mutatorName":"EqualityOperator","replacement":"d < r","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","68","69","75","76","77","80","82","83","84","85","86","87","88","89","90","91","92","93","94","95","97","99","100","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":19,"line":24},"start":{"column":13,"line":24}}},{"id":"13","mutatorName":"EqualityOperator","replacement":"d > r","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","68","69","75","76","77","80","82","83","84","85","86","87","88","89","90","91","92","93","94","95","97","99","100","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":19,"line":24},"start":{"column":13,"line":24}}},{"id":"14","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected [] to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["54"],"coveredBy":["54","58","75","76","77","92","100","104"],"location":{"end":{"column":51,"line":24},"start":{"column":28,"line":24}}},{"id":"15","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected [ '', null ] to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["54"],"coveredBy":["54","58","75","76","77","92","100","104"],"location":{"end":{"column":44,"line":24},"start":{"column":29,"line":24}}},{"id":"16","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","80","82","83","84","85","86","87","88","89","90","91","93","94","95","97","99","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":18,"line":25},"start":{"column":13,"line":25}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","80","82","83","84","85","86","87","88","89","90","91","93","94","95","97","99","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":18,"line":25},"start":{"column":13,"line":25}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"r >= 0","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","80","82","83","84","85","86","87","88","89","90","91","93","94","95","97","99","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":18,"line":25},"start":{"column":13,"line":25}}},{"id":"18","mutatorName":"EqualityOperator","replacement":"r <= 0","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","80","82","83","84","85","86","87","88","89","90","91","93","94","95","97","99","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":18,"line":25},"start":{"column":13,"line":25}}},{"id":"20","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected [] to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","94","99","105"],"location":{"end":{"column":50,"line":25},"start":{"column":27,"line":25}}},{"id":"21","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected [ '', null ] to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","94","99","105"],"location":{"end":{"column":43,"line":25},"start":{"column":28,"line":25}}},{"id":"22","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","80","82","83","84","85","86","87","88","89","90","91","93","95","97","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":36,"line":26},"start":{"column":13,"line":26}}},{"id":"23","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","80","82","83","84","85","86","87","88","89","90","91","93","95","97","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":36,"line":26},"start":{"column":13,"line":26}}},{"id":"24","mutatorName":"EqualityOperator","replacement":"(d - r) % (c - 1) === 0","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","80","82","83","84","85","86","87","88","89","90","91","93","95","97","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":36,"line":26},"start":{"column":13,"line":26}}},{"id":"25","mutatorName":"ArithmeticOperator","replacement":"(d - r) * (c - 1)","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","80","82","83","84","85","86","87","88","89","90","91","93","95","97","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":30,"line":26},"start":{"column":13,"line":26}}},{"id":"26","mutatorName":"ArithmeticOperator","replacement":"d + r","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","80","82","83","84","85","86","87","88","89","90","91","93","95","97","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":19,"line":26},"start":{"column":14,"line":26}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"c + 1","statusReason":"expected 'input invalid' to equal 5","status":"Killed","static":false,"testsCompleted":3,"killedBy":["45"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","80","82","83","84","85","86","87","88","89","90","91","93","95","97","101","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":29,"line":26},"start":{"column":24,"line":26}}},{"id":"28","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected [] to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["56"],"coveredBy":["56","80","93","101","106"],"location":{"end":{"column":68,"line":26},"start":{"column":45,"line":26}}},{"id":"29","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected [ '', null ] to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["56"],"coveredBy":["56","80","93","101","106"],"location":{"end":{"column":61,"line":26},"start":{"column":46,"line":26}}},{"id":"30","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","82","83","84","85","86","87","88","89","90","91","95","97","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":23,"line":27},"start":{"column":13,"line":27}}},{"id":"32","mutatorName":"EqualityOperator","replacement":"d / c < r","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","82","83","84","85","86","87","88","89","90","91","95","97","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":23,"line":27},"start":{"column":13,"line":27}}},{"id":"31","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","82","83","84","85","86","87","88","89","90","91","95","97","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":23,"line":27},"start":{"column":13,"line":27}}},{"id":"33","mutatorName":"EqualityOperator","replacement":"d / c > r","statusReason":"expected [ 'input invalid', null ] to not deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["42"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","82","83","84","85","86","87","88","89","90","91","95","97","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":23,"line":27},"start":{"column":13,"line":27}}},{"id":"34","mutatorName":"ArithmeticOperator","replacement":"d * c","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","82","83","84","85","86","87","88","89","90","91","95","97","102","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":18,"line":27},"start":{"column":13,"line":27}}},{"id":"35","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected [] to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57","95","102","107"],"location":{"end":{"column":55,"line":27},"start":{"column":32,"line":27}}},{"id":"36","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected [ '', null ] to deeply equal [ 'input invalid', null ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57","95","102","107"],"location":{"end":{"column":48,"line":27},"start":{"column":33,"line":27}}},{"id":"38","mutatorName":"ArithmeticOperator","replacement":"d + r","statusReason":"expected 7 to equal 5","status":"Killed","static":false,"testsCompleted":3,"killedBy":["45"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","82","83","84","85","86","87","88","89","90","91","97","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":23,"line":28},"start":{"column":18,"line":28}}},{"id":"37","mutatorName":"ArithmeticOperator","replacement":"(d - r) * (c - 1)","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","82","83","84","85","86","87","88","89","90","91","97","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":34,"line":28},"start":{"column":17,"line":28}}},{"id":"40","mutatorName":"ArithmeticOperator","replacement":"d - b","statusReason":"expected 1 to equal 5","status":"Killed","static":false,"testsCompleted":3,"killedBy":["45"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","82","83","84","85","86","87","88","89","90","91","97","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":22,"line":30},"start":{"column":17,"line":30}}},{"id":"39","mutatorName":"ArithmeticOperator","replacement":"c + 1","statusReason":"expected 3.6666666666666665 to equal 5","status":"Killed","static":false,"testsCompleted":3,"killedBy":["45"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","82","83","84","85","86","87","88","89","90","91","97","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":33,"line":28},"start":{"column":28,"line":28}}},{"id":"41","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected null to equal 5","status":"Killed","static":false,"testsCompleted":3,"killedBy":["45"],"coveredBy":["42","44","45","46","47","48","49","51","52","53","54","55","56","57","59","60","61","62","63","64","65","68","69","82","83","84","85","86","87","88","89","90","91","97","103","104","105","106","107","108","109","110","111"],"location":{"end":{"column":22,"line":32},"start":{"column":16,"line":32}}},{"id":"42","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected -100000 to equal 5","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":6,"line":86},"start":{"column":31,"line":37}}},{"id":"44","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected null to equal 5","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":61,"line":46},"start":{"column":13,"line":46}}},{"id":"43","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to equal 'Date invalide! Recitiți restricțiile.'","status":"Killed","static":false,"testsCompleted":17,"killedBy":["67"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":61,"line":46},"start":{"column":13,"line":46}}},{"id":"45","mutatorName":"LogicalOperator","replacement":"Array.isArray(rezultat) || rezultat.length === 2","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to equal 'Date invalide! Recitiți restricțiile.'","status":"Killed","static":false,"testsCompleted":17,"killedBy":["67"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":61,"line":46},"start":{"column":13,"line":46}}},{"id":"46","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to equal 'Date invalide! Recitiți restricțiile.'","status":"Killed","static":false,"testsCompleted":17,"killedBy":["67"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":61,"line":46},"start":{"column":40,"line":46}}},{"id":"47","mutatorName":"EqualityOperator","replacement":"rezultat.length !== 2","statusReason":"expected null to equal 5","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":61,"line":46},"start":{"column":40,"line":46}}},{"id":"48","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected null to equal 5","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","68","69","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":10,"line":48},"start":{"column":63,"line":46}}},{"id":"49","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":41,"line":51},"start":{"column":17,"line":51}}},{"id":"50","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected null to equal 5","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":41,"line":51},"start":{"column":17,"line":51}}},{"id":"51","mutatorName":"EqualityOperator","replacement":"Ex1.rezultat_corect3 <= 0","statusReason":"expected null to equal +0","status":"Killed","static":false,"testsCompleted":15,"killedBy":["65"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":41,"line":51},"start":{"column":17,"line":51}}},{"id":"52","mutatorName":"EqualityOperator","replacement":"Ex1.rezultat_corect3 >= 0","statusReason":"expected 2 to equal 1","status":"Killed","static":false,"testsCompleted":11,"killedBy":["61"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":41,"line":51},"start":{"column":17,"line":51}}},{"id":"53","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected -100000 to equal 5","status":"Killed","static":false,"testsCompleted":1,"killedBy":["45"],"coveredBy":["45"],"location":{"end":{"column":10,"line":55},"start":{"column":43,"line":51}}},{"id":"55","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Răspuns corect!' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["47"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":49,"line":65},"start":{"column":17,"line":65}}},{"id":"54","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":7,"killedBy":["51"],"coveredBy":["44","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":10,"line":63},"start":{"column":18,"line":56}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to equal 'Răspuns corect!'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["46"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":49,"line":65},"start":{"column":17,"line":65}}},{"id":"57","mutatorName":"LogicalOperator","replacement":"a === a_corect || b === b_corect","statusReason":"expected 'Răspuns corect!' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":49,"line":65},"start":{"column":17,"line":65}}},{"id":"58","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Răspuns corect!' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":31,"line":65},"start":{"column":17,"line":65}}},{"id":"59","mutatorName":"EqualityOperator","replacement":"a !== a_corect","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to equal 'Răspuns corect!'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["46"],"coveredBy":["44","45","46","47","48","49","50","51","52","60","61","62","63","64","65","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":31,"line":65},"start":{"column":17,"line":65}}},{"id":"60","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Răspuns corect!' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["52"],"coveredBy":["44","45","46","52","65","108","109","110","111"],"location":{"end":{"column":49,"line":65},"start":{"column":35,"line":65}}},{"id":"61","mutatorName":"EqualityOperator","replacement":"b !== b_corect","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to equal 'Răspuns corect!'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["46"],"coveredBy":["44","45","46","52","65","108","109","110","111"],"location":{"end":{"column":49,"line":65},"start":{"column":35,"line":65}}},{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'Răspuns corect!'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["46"],"coveredBy":["44","45","46","65","108","109","110","111"],"location":{"end":{"column":41,"line":66},"start":{"column":24,"line":66}}},{"id":"62","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'Răspuns corect!'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["46"],"coveredBy":["44","45","46","65","108","109","110","111"],"location":{"end":{"column":10,"line":67},"start":{"column":51,"line":65}}},{"id":"64","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Date invalide! Recitiți restricțiile.' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["47"],"coveredBy":["47","48","49","50","51","52","60","61","62","63","64","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":70,"line":68},"start":{"column":22,"line":68}}},{"id":"66","mutatorName":"LogicalOperator","replacement":"a_corect === \"input invalid\" && a_corect == null","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to equal 'Date invalide! Recitiți restricțiile.'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["50"],"coveredBy":["47","48","49","50","51","52","60","61","62","63","64","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":70,"line":68},"start":{"column":22,"line":68}}},{"id":"65","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to equal 'Date invalide! Recitiți restricțiile.'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["50"],"coveredBy":["47","48","49","50","51","52","60","61","62","63","64","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":70,"line":68},"start":{"column":22,"line":68}}},{"id":"67","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to equal 'Date invalide! Recitiți restricțiile.'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["50"],"coveredBy":["47","48","49","50","51","52","60","61","62","63","64","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":50,"line":68},"start":{"column":22,"line":68}}},{"id":"68","mutatorName":"EqualityOperator","replacement":"a_corect !== \"input invalid\"","statusReason":"expected 'Date invalide! Recitiți restricțiile.' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["47"],"coveredBy":["47","48","49","50","51","52","60","61","62","63","64","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":50,"line":68},"start":{"column":22,"line":68}}},{"id":"69","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to equal 'Date invalide! Recitiți restricțiile.'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["50"],"coveredBy":["47","48","49","50","51","52","60","61","62","63","64","66","67","68","69","70","71","78","79","80","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":50,"line":68},"start":{"column":35,"line":68}}},{"id":"70","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["51"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","66","67","68","69","70","71","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":70,"line":68},"start":{"column":54,"line":68}}},{"id":"72","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'Date invalide! Recitiți restricțiile.'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","66","67","70","71","78","79","80","108","109","110","111"],"location":{"end":{"column":10,"line":70},"start":{"column":72,"line":68}}},{"id":"71","mutatorName":"EqualityOperator","replacement":"a_corect != null","statusReason":"expected 'Date invalide! Recitiți restricțiile.' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["47"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","66","67","68","69","70","71","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":70,"line":68},"start":{"column":54,"line":68}}},{"id":"73","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'Date invalide! Recitiți restricțiile.'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","66","67","70","71","78","79","80","108","109","110","111"],"location":{"end":{"column":63,"line":69},"start":{"column":24,"line":69}}},{"id":"74","mutatorName":"BlockStatement","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["47"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":10,"line":85},"start":{"column":18,"line":71}}},{"id":"75","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["51"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":165,"line":72},"start":{"column":18,"line":72}}},{"id":"76","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to include 'Rezultatul corect este'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["49"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":165,"line":72},"start":{"column":18,"line":72}}},{"id":"77","mutatorName":"LogicalOperator","replacement":"Ex1.rezultat_corect1 === Ex1.rezultat_corect2 && Ex1.rezultat_corect2 === Ex1.rezultat_corect3 && Ex1.rezultat_corect2 === Ex1.rezultat_corect1","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["51"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":165,"line":72},"start":{"column":18,"line":72}}},{"id":"78","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["51"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":113,"line":72},"start":{"column":19,"line":72}}},{"id":"79","mutatorName":"LogicalOperator","replacement":"Ex1.rezultat_corect1 === Ex1.rezultat_corect2 || Ex1.rezultat_corect2 === Ex1.rezultat_corect3","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["51"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":113,"line":72},"start":{"column":19,"line":72}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["51"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":64,"line":72},"start":{"column":19,"line":72}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"Ex1.rezultat_corect1 !== Ex1.rezultat_corect2","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["51"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":64,"line":72},"start":{"column":19,"line":72}}},{"id":"83","mutatorName":"EqualityOperator","replacement":"Ex1.rezultat_corect2 !== Ex1.rezultat_corect3","statusReason":"expected +0 to equal 1","status":"Killed","static":false,"testsCompleted":3,"killedBy":["68"],"coveredBy":["49","52","68","83","87","88","108","110","111"],"location":{"end":{"column":113,"line":72},"start":{"column":68,"line":72}}},{"id":"82","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected +0 to equal 1","status":"Killed","static":false,"testsCompleted":3,"killedBy":["68"],"coveredBy":["49","52","68","83","87","88","108","110","111"],"location":{"end":{"column":113,"line":72},"start":{"column":68,"line":72}}},{"id":"84","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected +0 to equal 1","status":"Killed","static":false,"testsCompleted":11,"killedBy":["82"],"coveredBy":["47","48","51","52","60","61","62","63","64","69","82","84","85","86","87","89","90","108","109","110","111"],"location":{"end":{"column":164,"line":72},"start":{"column":119,"line":72}}},{"id":"85","mutatorName":"EqualityOperator","replacement":"Ex1.rezultat_corect2 !== Ex1.rezultat_corect1","statusReason":"expected 2 to equal 1","status":"Killed","static":false,"testsCompleted":6,"killedBy":["61"],"coveredBy":["47","48","51","52","60","61","62","63","64","69","82","84","85","86","87","89","90","108","109","110","111"],"location":{"end":{"column":164,"line":72},"start":{"column":119,"line":72}}},{"id":"86","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected +0 to equal 1","status":"Killed","static":false,"testsCompleted":3,"killedBy":["68"],"coveredBy":["49","52","68","83","87","88","108","110","111"],"location":{"end":{"column":14,"line":74},"start":{"column":167,"line":72}}},{"id":"87","mutatorName":"UpdateOperator","replacement":"Ex1.count--","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to include 'Rezultatul corect este'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["49"],"coveredBy":["49","52","68","83","87","88","108","110","111"],"location":{"end":{"column":33,"line":73},"start":{"column":22,"line":73}}},{"id":"88","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected +0 to equal 1","status":"Killed","static":false,"testsCompleted":4,"killedBy":["60"],"coveredBy":["47","48","51","60","61","62","63","64","69","82","84","85","86","89","90","108","109","110","111"],"location":{"end":{"column":14,"line":78},"start":{"column":19,"line":75}}},{"id":"89","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected +0 to equal 1","status":"Killed","static":false,"testsCompleted":10,"killedBy":["82"],"coveredBy":["47","48","51","60","61","62","63","64","69","82","84","85","86","89","90","108","109","110","111"],"location":{"end":{"column":43,"line":76},"start":{"column":28,"line":76}}},{"id":"90","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected +0 to equal 1","status":"Killed","static":false,"testsCompleted":4,"killedBy":["60"],"coveredBy":["47","48","51","60","61","62","63","64","69","82","84","85","86","89","90","108","109","110","111"],"location":{"end":{"column":43,"line":76},"start":{"column":28,"line":76}}},{"id":"91","mutatorName":"EqualityOperator","replacement":"Ex1.count === 1","statusReason":"expected +0 to equal 1","status":"Killed","static":false,"testsCompleted":4,"killedBy":["60"],"coveredBy":["47","48","51","60","61","62","63","64","69","82","84","85","86","89","90","108","109","110","111"],"location":{"end":{"column":43,"line":76},"start":{"column":28,"line":76}}},{"id":"92","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["47"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":32,"line":80},"start":{"column":18,"line":80}}},{"id":"93","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to include 'Rezultatul corect este'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["49"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":32,"line":80},"start":{"column":18,"line":80}}},{"id":"94","mutatorName":"EqualityOperator","replacement":"Ex1.count > 3","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":4,"killedBy":["51"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":32,"line":80},"start":{"column":18,"line":80}}},{"id":"95","mutatorName":"EqualityOperator","replacement":"Ex1.count < 3","statusReason":"expected 'Ați depășit numărul maxim de încercăr…' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["47"],"coveredBy":["47","48","49","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","88","89","90","108","109","110","111"],"location":{"end":{"column":32,"line":80},"start":{"column":18,"line":80}}},{"id":"96","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'Răspuns greșit! Mai încearcă :)' to include 'Rezultatul corect este'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["49"],"coveredBy":["49","88","108","110","111"],"location":{"end":{"column":14,"line":82},"start":{"column":34,"line":80}}},{"id":"97","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '5 și 2' to include 'Rezultatul corect este'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["49"],"coveredBy":["49","88","108","110","111"],"location":{"end":{"column":89,"line":81},"start":{"column":24,"line":81}}},{"id":"98","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 2 to equal 3","status":"Killed","static":false,"testsCompleted":2,"killedBy":["88"],"coveredBy":["49","88","108","110","111"],"location":{"end":{"column":109,"line":81},"start":{"column":103,"line":81}}},{"id":"99","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to include 'Răspuns greșit'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["47"],"coveredBy":["47","48","51","52","60","61","62","63","64","68","69","82","83","84","85","86","87","89","90","108","109","110","111"],"location":{"end":{"column":54,"line":84},"start":{"column":21,"line":84}}},{"id":"2","mutatorName":"UnaryOperator","replacement":"+100000","statusReason":"expected 100000 to equal -100000","status":"Killed","static":true,"testsCompleted":44,"killedBy":["43"],"coveredBy":[],"location":{"end":{"column":38,"line":9},"start":{"column":31,"line":9}}},{"id":"1","mutatorName":"UnaryOperator","replacement":"+100000","statusReason":"expected 100000 to equal -100000","status":"Killed","static":true,"testsCompleted":44,"killedBy":["43"],"coveredBy":[],"location":{"end":{"column":38,"line":8},"start":{"column":31,"line":8}}},{"id":"0","mutatorName":"UnaryOperator","replacement":"+100000","statusReason":"expected 100000 to equal -100000","status":"Killed","static":true,"testsCompleted":44,"killedBy":["43"],"coveredBy":[],"location":{"end":{"column":38,"line":7},"start":{"column":31,"line":7}}}],"source":"class Ex1 {\r\n    constructor() {\r\n        // console.log('ex1');\r\n    }\r\n\r\n    static count = 0;\r\n    static rezultat_corect1 = -100000;\r\n    static rezultat_corect2 = -100000;\r\n    static rezultat_corect3 = -100000;\r\n\r\n    rezolvare(c, r, d) {\r\n\r\n        // if (\r\n        //     c < 2 ||\r\n        //     d <= r ||\r\n        //     r < 0 ||\r\n        //     (d - r) % (c - 1) !== 0 \r\n        //       || d/c <= r\r\n        // ) {\r\n        //     return [\"input invalid\", null];\r\n        // }\r\n\r\n        if (c < 2) return [\"input invalid\", null];\r\n        if (d <= r) return [\"input invalid\", null];\r\n        if (r < 0) return [\"input invalid\", null];\r\n        if ((d - r) % (c - 1) !== 0) return [\"input invalid\", null];\r\n        if (d / c <= r) return [\"input invalid\", null];\r\n        let b = (d - r) / (c - 1);\r\n\r\n        let a = d + b;\r\n\r\n        return [a, b];\r\n    }\r\n\r\n\r\n\r\n    verificare(c, r, d, a, b) {\r\n        // let [a_corect, b_corect] = this.rezolvare(c, r, d) || [null, null];\r\n        let rezultat = this.rezolvare(c, r, d);\r\n        // let [a_corect, b_corect] = Array.isArray(rezultat) && rezultat.length === 2\r\n        //     ? rezultat\r\n        //     : [null, null];\r\n        let a_corect = null;\r\n        let b_corect = null;\r\n\r\n        if (Array.isArray(rezultat) && rezultat.length === 2) {\r\n            [a_corect, b_corect] = rezultat;\r\n        }\r\n\r\n\r\n/*1*/       if (Ex1.rezultat_corect3 < 0) {\r\n/*2*/           Ex1.rezultat_corect3 = a_corect;\r\n/*3*/           Ex1.rezultat_corect2 = a_corect;\r\n/*4*/           Ex1.rezultat_corect1 = a_corect;\r\n        }\r\n/*5*/       else {\r\n/*6*/            Ex1.rezultat_corect3 = Ex1.rezultat_corect2;\r\n/*7*/            Ex1.rezultat_corect2 = Ex1.rezultat_corect1;\r\n            Ex1.rezultat_corect1 = a_corect;\r\n            //  Ex1.rezultat_corect1 = a_corect, b_corect;\r\n            // Ex1.rezultat_corect1 = [a_corect, b_corect];\r\n\r\n        }\r\n\r\n/*9*/       if (a === a_corect && b === b_corect) {\r\n/*10*/          return \"Răspuns corect!\";\r\n        }\r\n/*11*/      else if (a_corect === \"input invalid\" || a_corect == null) {\r\n/*12*/          return \"Date invalide! Recitiți restricțiile.\";\r\n        }\r\n/*13*/      else {\r\n/*14*/       if ((Ex1.rezultat_corect1 === Ex1.rezultat_corect2 && Ex1.rezultat_corect2 === Ex1.rezultat_corect3) || (Ex1.rezultat_corect2 === Ex1.rezultat_corect1)) {\r\n/*15*/               Ex1.count++;\r\n            }\r\n/*16*/       else {\r\n/*17*/                 if (Ex1.count !== 1)\r\n/*18*/                   Ex1.count = 1;\r\n            }\r\n\r\n/*19*/       if (Ex1.count >= 3) {\r\n/*20*/          return 'Ați depășit numărul maxim de încercări. Rezultatul corect este ' + a_corect + ' și ' + b_corect;\r\n            }\r\n\r\n/*21*/       return \"Răspuns greșit! Mai încearcă :)\";\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Ex1;\r\n// module.exports = Ex1;\r\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"spec/testare-mutant-echivalent.mjs":{"tests":[{"id":"0","name":"Testare functionala-mutant echivalent Respecta toate constrangerile"},{"id":"1","name":"Testare functionala-mutant echivalent Afiseaza \"input invalid\" (impartire la zero)"},{"id":"2","name":"Testare functionala-mutant echivalent Afiseaza \"input invalid\" (b nu este natural)"},{"id":"3","name":"Testare functionala-mutant echivalent Afiseaza \"input invalid\" (rest negativ)"},{"id":"4","name":"Testare functionala-mutant echivalent Afiseaza \"input invalid\" (b=r)"},{"id":"5","name":"Testare functionala-mutant echivalent Test frontiera - afiseaza \"input invalid\""},{"id":"6","name":"Testare structurala-mutant echivalent Respecta toate constrangerile (ramificare stanga)"},{"id":"7","name":"Testare structurala-mutant echivalent Afiseaza 'input invalid' (c prea mic)"},{"id":"8","name":"Testare structurala-mutant echivalent Afiseaza 'input invalid' (r negativ)"},{"id":"9","name":"Testare structurala-mutant echivalent Afiseaza 'input invalid' (d < r)"},{"id":"10","name":"Testare structurala-mutant echivalent Afiseaza 'input invalid' (impartire neintreaga)"},{"id":"11","name":"Testare structurala-mutant echivalent Afiseaza 'input invalid' (b = r)"},{"id":"12","name":"Testare structurala-mutant echivalent Caz adevarat si caz fals - valid vs invalid -conditie C1 (c<2)"},{"id":"13","name":"Testare structurala-mutant echivalent Caz adevarat si caz fals - valid vs invalid -conditie C2 (d<=r)"},{"id":"14","name":"Testare structurala-mutant echivalent Caz adevarat si caz fals - valid vs invalid -conditie C3 (r<0)"},{"id":"15","name":"Testare structurala-mutant echivalent Caz adevarat si caz fals - valid vs invalid -conditie C4 ((d - r) % (c - 1) !== 0)"},{"id":"16","name":"Testare structurala-mutant echivalent Caz adevarat si caz fals - valid vs invalid -conditie C5 ( d/c <= r)"},{"id":"17","name":"Testare structurala-mutant echivalent Statement coverage"},{"id":"18","name":"Testare structurala-mutant echivalent Branch coverage"},{"id":"19","name":"Testare structurala-mutant echivalent Condition coverage"},{"id":"20","name":"Testare structurala-mutant echivalent Circuits coverage"}],"source":"import Ex1 from \"../mutanti/mutant-echivalent.js\";\r\nimport { expect } from \"chai\";\r\n\r\nconst myObj = new Ex1();\r\n\r\ndescribe(\"Testare functionala-mutant echivalent\", function () {\r\n    // am pus cateva exemple din fiecare clasa, sunt mult mai multe teste\r\n    it(\"Respecta toate constrangerile\", function () {\r\n        expect(myObj.rezolvare(2, 1, 3)).to.deep.equal([5, 2]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (impartire la zero)\", function () {\r\n        expect(myObj.rezolvare(3, 2, 2)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (b nu este natural)\", function () {\r\n        expect(myObj.rezolvare(3, 2, 5)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (rest negativ)\", function () {\r\n        expect(myObj.rezolvare(3, -1, 3)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (b=r)\", function () {\r\n        expect(myObj.rezolvare(4, 2, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Test frontiera - afiseaza \\\"input invalid\\\"\", function () {\r\n        expect(myObj.rezolvare(1, 2, 4)).to.deep.equal([\"input invalid\", null]);\r\n        expect(myObj.rezolvare(1, 2, 2)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n});\r\n\r\ndescribe(\"Testare structurala-mutant echivalent\", function () {\r\n    // Acoperire la nivel de instructiune\r\n    it(\"Respecta toate constrangerile (ramificare stanga)\", function () {\r\n        expect(myObj.rezolvare(2, 1, 3)).to.deep.equal([5, 2]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (c prea mic)\", function () {\r\n        expect(myObj.rezolvare(1, 1, 3)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    // Acoperire la nivel de decizie\r\n    it(\"Afiseaza 'input invalid' (r negativ)\", function () {\r\n        expect(myObj.rezolvare(3, -2, 7)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (d < r)\", function () {\r\n        expect(myObj.rezolvare(3, 4, 2)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (impartire neintreaga)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (b = r)\", function () {\r\n        expect(myObj.rezolvare(3, 6, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    // Acoperire la nivel de conditii (true/false)\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C1 (c<2)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(1, 2, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C2 (d<=r)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(4, 3, 3)).to.deep.equal([\"input invalid\", null]); \r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C3 (r<0)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(4, -1, 8)).to.deep.equal([\"input invalid\", null]); \r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]); \r\n        expect(myObj.rezolvare(4, -1, 8)).to.deep.equal([\"input invalid\", null]); \r\n\r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C4 ((d - r) % (c - 1) !== 0)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(4, 1, 8)).to.deep.equal([\"input invalid\", null]); \r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n\r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C5 ( d/c <= r)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(3, 6, 8)).to.deep.equal([\"input invalid\", null]); \r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]); \r\n    });\r\n\r\n    //  Acoperire pe instructiuni (statement coverage)\r\n    it(\"Statement coverage\", function () {\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n        expect(myObj.verificare(1, 2, 1, 5, 1)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n        expect(myObj.verificare(4, 1, 7, 9, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n\r\n        // depasire incercari\r\n        const rasp_corect = 9;\r\n        Ex1.rezultat_corect1 = 9;\r\n        Ex1.rezultat_corect2 = 9;\r\n        Ex1.rezultat_corect3 = 9;\r\n        Ex1.count = 3;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Ați depășit numărul maxim de încercări. Rezultatul corect este 9 și 2\");\r\n    });\r\n\r\n    //  Acoperire pe ramuri (branch coverage)\r\n    it(\"Branch coverage\", function () {\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n        expect(myObj.verificare(1, 2, 1, 5, 1)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n        expect(myObj.verificare(4, 1, 7, 9, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n    });\r\n\r\n    //  Acoperire pe conditii individuale (condition coverage)\r\n    it(\"Condition coverage\", function () {\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n        expect(myObj.verificare(1, 2, 1, 5, 1)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n\r\n        // toate conditii de egalitate = true\r\n        Ex1.rezultat_corect1 = 9;\r\n        Ex1.rezultat_corect2 = 9;\r\n        Ex1.rezultat_corect3 = 9;\r\n        Ex1.count = 2;\r\n        myObj.verificare(4, 1, 7, 5, 3);\r\n        expect(Ex1.count).to.equal(3);\r\n\r\n        // toate conditii de egalitate = false\r\n        Ex1.rezultat_corect1 = 5;\r\n        Ex1.rezultat_corect2 = 6;\r\n        Ex1.rezultat_corect3 = 7;\r\n        Ex1.count = 2;\r\n        myObj.verificare(4, 1, 7, 5, 3);\r\n        expect(Ex1.count).to.equal(1);\r\n\r\n        // count >= 2\r\n        Ex1.count = 2;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Ați depășit numărul maxim de încercări. Rezultatul corect este 9 și 2\");\r\n\r\n        // count < 2\r\n        Ex1.count = 1;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n    });\r\n\r\n    //  Acoperire pe circuite complete (circuit/path coverage)\r\n    it(\"Circuits coverage\", function () {\r\n        // circuit 1 - raspuns corect\r\n        // 1, 2, 3, 4, 9, 10\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n\r\n        // circuit 2 - input invalid\r\n        // 1, 2, 3, 4, 9, 11, 12\r\n        expect(myObj.verificare(1, 2, 1, 0, 0)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n\r\n        // circuit 3 - raspuns gresit, count < 3\r\n        // 1, 2, 3, 4, 9, 11, 13, 16, 21\r\n        Ex1.count = 1;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n\r\n        // circuit 4 - raspuns gresit, count >= 3\r\n        // 1, 2, 3, 4, 13, 14, 15, 19, 20\r\n        Ex1.rezultat_corect1 = 9;\r\n        Ex1.rezultat_corect2 = 9;\r\n        Ex1.rezultat_corect3 = 9;\r\n        Ex1.count = 3;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Ați depășit numărul maxim de încercări. Rezultatul corect este 9 și 2\");\r\n    });\r\n\r\n\r\n});\r\n"},"spec/testare-mutant-echivalent2.mjs":{"tests":[{"id":"21","name":"Testare functionala-mutant echivalent-2 Respecta toate constrangerile"},{"id":"22","name":"Testare functionala-mutant echivalent-2 Afiseaza \"input invalid\" (impartire la zero)"},{"id":"23","name":"Testare functionala-mutant echivalent-2 Afiseaza \"input invalid\" (b nu este natural)"},{"id":"24","name":"Testare functionala-mutant echivalent-2 Afiseaza \"input invalid\" (rest negativ)"},{"id":"25","name":"Testare functionala-mutant echivalent-2 Afiseaza \"input invalid\" (b=r)"},{"id":"26","name":"Testare functionala-mutant echivalent-2 Test frontiera - afiseaza \"input invalid\""},{"id":"27","name":"Testare structurala-mutant echivalent -2 Respecta toate constrangerile (ramificare stanga)"},{"id":"28","name":"Testare structurala-mutant echivalent -2 Afiseaza 'input invalid' (c prea mic)"},{"id":"29","name":"Testare structurala-mutant echivalent -2 Afiseaza 'input invalid' (r negativ)"},{"id":"30","name":"Testare structurala-mutant echivalent -2 Afiseaza 'input invalid' (d < r)"},{"id":"31","name":"Testare structurala-mutant echivalent -2 Afiseaza 'input invalid' (impartire neintreaga)"},{"id":"32","name":"Testare structurala-mutant echivalent -2 Afiseaza 'input invalid' (b = r)"},{"id":"33","name":"Testare structurala-mutant echivalent -2 Caz adevarat si caz fals - valid vs invalid -conditie C1 (c<2)"},{"id":"34","name":"Testare structurala-mutant echivalent -2 Caz adevarat si caz fals - valid vs invalid -conditie C2 (d<=r)"},{"id":"35","name":"Testare structurala-mutant echivalent -2 Caz adevarat si caz fals - valid vs invalid -conditie C3 (r<0)"},{"id":"36","name":"Testare structurala-mutant echivalent -2 Caz adevarat si caz fals - valid vs invalid -conditie C4 ((d - r) % (c - 1) !== 0)"},{"id":"37","name":"Testare structurala-mutant echivalent -2 Caz adevarat si caz fals - valid vs invalid -conditie C5 ( d/c <= r)"},{"id":"38","name":"Testare structurala-mutant echivalent -2 Statement coverage"},{"id":"39","name":"Testare structurala-mutant echivalent -2 Branch coverage"},{"id":"40","name":"Testare structurala-mutant echivalent -2 Condition coverage"},{"id":"41","name":"Testare structurala-mutant echivalent -2 Circuits coverage"}],"source":"import Ex1 from \"../mutanti/mutant-echivalent2.js\";\r\nimport { expect } from \"chai\";\r\n\r\nconst myObj = new Ex1();\r\n\r\ndescribe(\"Testare functionala-mutant echivalent-2\", function () {\r\n    // am pus cateva exemple din fiecare clasa, sunt mult mai multe teste\r\n    it(\"Respecta toate constrangerile\", function () {\r\n        expect(myObj.rezolvare(2, 1, 3)).to.deep.equal([5, 2]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (impartire la zero)\", function () {\r\n        expect(myObj.rezolvare(3, 2, 2)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (b nu este natural)\", function () {\r\n        expect(myObj.rezolvare(3, 2, 5)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (rest negativ)\", function () {\r\n        expect(myObj.rezolvare(3, -1, 3)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (b=r)\", function () {\r\n        expect(myObj.rezolvare(4, 2, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Test frontiera - afiseaza \\\"input invalid\\\"\", function () {\r\n        expect(myObj.rezolvare(1, 2, 4)).to.deep.equal([\"input invalid\", null]);\r\n        expect(myObj.rezolvare(1, 2, 2)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n});\r\n\r\ndescribe(\"Testare structurala-mutant echivalent -2\", function () {\r\n    // Acoperire la nivel de instructiune\r\n    it(\"Respecta toate constrangerile (ramificare stanga)\", function () {\r\n        expect(myObj.rezolvare(2, 1, 3)).to.deep.equal([5, 2]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (c prea mic)\", function () {\r\n        expect(myObj.rezolvare(1, 1, 3)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    // Acoperire la nivel de decizie\r\n    it(\"Afiseaza 'input invalid' (r negativ)\", function () {\r\n        expect(myObj.rezolvare(3, -2, 7)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (d < r)\", function () {\r\n        expect(myObj.rezolvare(3, 4, 2)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (impartire neintreaga)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (b = r)\", function () {\r\n        expect(myObj.rezolvare(3, 6, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    // Acoperire la nivel de conditii (true/false)\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C1 (c<2)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(1, 2, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C2 (d<=r)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(4, 3, 3)).to.deep.equal([\"input invalid\", null]); \r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C3 (r<0)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(4, -1, 8)).to.deep.equal([\"input invalid\", null]); \r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]); \r\n        expect(myObj.rezolvare(4, -1, 8)).to.deep.equal([\"input invalid\", null]); \r\n\r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C4 ((d - r) % (c - 1) !== 0)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(4, 1, 8)).to.deep.equal([\"input invalid\", null]); \r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n\r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C5 ( d/c <= r)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(3, 6, 8)).to.deep.equal([\"input invalid\", null]); \r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]); \r\n    });\r\n\r\n    //  Acoperire pe instructiuni (statement coverage)\r\n    it(\"Statement coverage\", function () {\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n        expect(myObj.verificare(1, 2, 1, 5, 1)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n        expect(myObj.verificare(4, 1, 7, 9, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n\r\n        // depasire incercari\r\n        const rasp_corect = 9;\r\n        Ex1.rezultat_corect1 = 9;\r\n        Ex1.rezultat_corect2 = 9;\r\n        Ex1.rezultat_corect3 = 9;\r\n        Ex1.count = 3;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Ați depășit numărul maxim de încercări. Rezultatul corect este 9 și 2\");\r\n    });\r\n\r\n    //  Acoperire pe ramuri (branch coverage)\r\n    it(\"Branch coverage\", function () {\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n        expect(myObj.verificare(1, 2, 1, 5, 1)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n        expect(myObj.verificare(4, 1, 7, 9, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n    });\r\n\r\n    //  Acoperire pe conditii individuale (condition coverage)\r\n    it(\"Condition coverage\", function () {\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n        expect(myObj.verificare(1, 2, 1, 5, 1)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n\r\n        // toate conditii de egalitate = true\r\n        Ex1.rezultat_corect1 = 9;\r\n        Ex1.rezultat_corect2 = 9;\r\n        Ex1.rezultat_corect3 = 9;\r\n        Ex1.count = 2;\r\n        myObj.verificare(4, 1, 7, 5, 3);\r\n        expect(Ex1.count).to.equal(3);\r\n\r\n        // toate conditii de egalitate = false\r\n        Ex1.rezultat_corect1 = 5;\r\n        Ex1.rezultat_corect2 = 6;\r\n        Ex1.rezultat_corect3 = 7;\r\n        Ex1.count = 2;\r\n        myObj.verificare(4, 1, 7, 5, 3);\r\n        expect(Ex1.count).to.equal(1);\r\n\r\n        // count >= 2\r\n        Ex1.count = 2;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Ați depășit numărul maxim de încercări. Rezultatul corect este 9 și 2\");\r\n\r\n        // count < 2\r\n        Ex1.count = 1;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n    });\r\n\r\n    //  Acoperire pe circuite complete (circuit/path coverage)\r\n    it(\"Circuits coverage\", function () {\r\n        // circuit 1 - raspuns corect\r\n        // 1, 2, 3, 4, 9, 10\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n\r\n        // circuit 2 - input invalid\r\n        // 1, 2, 3, 4, 9, 11, 12\r\n        expect(myObj.verificare(1, 2, 1, 0, 0)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n\r\n        // circuit 3 - raspuns gresit, count < 3\r\n        // 1, 2, 3, 4, 9, 11, 13, 16, 21\r\n        Ex1.count = 1;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n\r\n        // circuit 4 - raspuns gresit, count >= 3\r\n        // 1, 2, 3, 4, 13, 14, 15, 19, 20\r\n        Ex1.rezultat_corect1 = 9;\r\n        Ex1.rezultat_corect2 = 9;\r\n        Ex1.rezultat_corect3 = 9;\r\n        Ex1.count = 3;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Ați depășit numărul maxim de încercări. Rezultatul corect este 9 și 2\");\r\n    });\r\n\r\n\r\n});\r\n"},"spec/testare-mutanti.mjs":{"tests":[{"id":"42","name":"Teste speciale pentru mutanți Stryker Ucide mutantul: if (c < 2) -> false (test izolat, clar și direct)"},{"id":"43","name":"Teste speciale pentru mutanți Stryker  Inițializare și verificare statică Inițializare corectă a valorilor statice"},{"id":"44","name":"Teste speciale pentru mutanți Stryker  Inițializare și verificare statică Skip inițializare rezultat_corect când e deja setat"},{"id":"45","name":"Teste speciale pentru mutanți Stryker  Inițializare și verificare statică Activează logica de inițializare rezultat_corect"},{"id":"46","name":"Teste speciale pentru mutanți Stryker Răspunsuri corecte și greșite Răspuns corect: a === a_corect și b === b_corect"},{"id":"47","name":"Teste speciale pentru mutanți Stryker Răspunsuri corecte și greșite Răspuns greșit: a, b greșite → ramura else"},{"id":"48","name":"Teste speciale pentru mutanți Stryker Răspunsuri corecte și greșite Răspuns greșit cu count sub 3 → încurajează să mai încerce"},{"id":"49","name":"Teste speciale pentru mutanți Stryker Răspunsuri corecte și greșite Depășește 3 încercări → returnează răspunsul corect"},{"id":"50","name":"Teste speciale pentru mutanți Stryker Răspunsuri corecte și greșite Verificare cu input invalid → returnează mesajul de eroare"},{"id":"51","name":"Teste speciale pentru mutanți Stryker  Combinații corecte/greșite a/b a greșit, b corect"},{"id":"52","name":"Teste speciale pentru mutanți Stryker  Combinații corecte/greșite a/b a corect, b greșit"},{"id":"53","name":"Teste speciale pentru mutanți Stryker  Condiții din metoda `rezolvare` Condiția c < 2 - true și false"},{"id":"54","name":"Teste speciale pentru mutanți Stryker  Condiții din metoda `rezolvare` Condiția d <= r - true și false"},{"id":"55","name":"Teste speciale pentru mutanți Stryker  Condiții din metoda `rezolvare` Condiția r < 0 - true și false"},{"id":"56","name":"Teste speciale pentru mutanți Stryker  Condiții din metoda `rezolvare` Condiția (d - r) % (c - 1) !== 0 - true și false"},{"id":"57","name":"Teste speciale pentru mutanți Stryker  Condiții din metoda `rezolvare` Condiția d / c <= r - true și false"},{"id":"58","name":"Teste speciale pentru mutanți Stryker  Condiții din metoda `rezolvare` Condiția d === r → invalid"},{"id":"59","name":"Teste speciale pentru mutanți Stryker  Condiții din metoda `rezolvare` Condiția c === 2 → valid"},{"id":"60","name":"Teste speciale pentru mutanți Stryker Verificări count și rezultate egale Ex1.count !== 1 este true"},{"id":"61","name":"Teste speciale pentru mutanți Stryker Verificări count și rezultate egale Ex1.count !== 1 este false"},{"id":"62","name":"Teste speciale pentru mutanți Stryker Verificări count și rezultate egale Toate rezultate egale"},{"id":"63","name":"Teste speciale pentru mutanți Stryker Verificări count și rezultate egale Două rezultate egale, unul diferit"},{"id":"64","name":"Teste speciale pentru mutanți Stryker Verificări count și rezultate egale Toate rezultate diferite"},{"id":"65","name":"Ucidem mutantii supravietuitori Ucide mutantul: rezultat_corect3 < 0 → nu se reinitializează dacă e deja 0"},{"id":"66","name":"Ucidem mutantii supravietuitori Ucide mutantul NoCoverage: fallback [] vs [null, null]"},{"id":"67","name":"Ucidem mutantii supravietuitori Ucide mutantul: verificare fallback la [null, null] dacă rezultat invalid"},{"id":"68","name":"Ucidem mutantii supravietuitori Ucide mutantul: toate 3 rezultate corecte egale"},{"id":"69","name":"Ucidem mutantii supravietuitori Ucide mutantul: count === 1 → nu se modifică"},{"id":"70","name":"Ucidem mutantii supravietuitori Fallback destructurare funcționează corect → returnează mesaj de eroare"},{"id":"71","name":"Ucidem mutantii supravietuitori Ucide fallback-ul destructurare: nu e array valid"},{"id":"72","name":"Ucidem mutantii supravietuitori Ucide mutantul: if (c < 2) → false (adică codul continuă greșit în loc să se oprească)"},{"id":"73","name":"Ucidem mutantii supravietuitori Ucide mutantul: c < 2 → codul trebuie să se oprească imediat"},{"id":"74","name":"Ucidem mutantii supravietuitori Validări în metoda rezolvare Ucide mutantul: c < 2"},{"id":"75","name":"Ucidem mutantii supravietuitori Validări în metoda rezolvare Ucide mutantul: d <= r (d === r)"},{"id":"76","name":"Ucidem mutantii supravietuitori Validări în metoda rezolvare Ucide mutantul: d <= r (d < r)"},{"id":"77","name":"Ucidem mutantii supravietuitori Validări în metoda rezolvare Ucide mutantul: condiție trecută, dar alt validator blochează"},{"id":"78","name":"Ucidem mutantii supravietuitori Fallback destructurare invalidă Ucide fallback-ul: fallback []"},{"id":"79","name":"Ucidem mutantii supravietuitori Fallback destructurare invalidă Ucide fallback-ul: fallback [null, null] destructurare"},{"id":"80","name":"Ucidem mutantii supravietuitori Fallback destructurare invalidă Ucide fallback-ul: fără fallback explicit (undefined)"},{"id":"81","name":"Ucidem mutantii supravietuitori Fallback destructurare invalidă Ucide fallback-ul: fallback [] direct"},{"id":"82","name":"Ucidem mutantii supravietuitori Verificări count și rezultate corecte Ucide mutant egalitate: toate egale"},{"id":"83","name":"Ucidem mutantii supravietuitori Verificări count și rezultate corecte Ucide mutant egalitate: primele 2 egale"},{"id":"84","name":"Ucidem mutantii supravietuitori Verificări count și rezultate corecte Ucide mutant egalitate: ultimele 2 egale"},{"id":"85","name":"Ucidem mutantii supravietuitori Verificări count și rezultate corecte Ucide mutant egalitate: toate diferite"},{"id":"86","name":"Ucidem mutantii supravietuitori Verificări count și rezultate corecte Ucide mutant egalitate: doar r1 === r2"},{"id":"87","name":"Ucidem mutantii supravietuitori Verificări count și rezultate corecte Ucide mutantul: count !== 1 (inițializare)"},{"id":"88","name":"Ucidem mutantii supravietuitori Verificări count și rezultate corecte Ucide mutantul: count !== 1 (crește de la 2 la 3)"},{"id":"89","name":"Ucidem mutantii supravietuitori Verificări count și rezultate corecte Ucide mutantul: count === 1, NU trebuie să modifice count"},{"id":"90","name":"Ucidem mutantii supravietuitori Verificări count și rezultate corecte Ucide mutantul: count === 1, ramura else (cu mesaj)"}],"source":"import { expect } from \"chai\";\r\nimport Ex1 from \"../exercitii-test.mjs\";\r\n\r\nconst myObj = new Ex1();\r\n\r\ndescribe(\"Teste speciale pentru mutanți Stryker\", function () {\r\n  describe(\" Inițializare și verificare statică\", function () {\r\n    it(\"Inițializare corectă a valorilor statice\", () => {\r\n      expect(Ex1.rezultat_corect1).to.equal(-100000);\r\n      expect(Ex1.rezultat_corect2).to.equal(-100000);\r\n      expect(Ex1.rezultat_corect3).to.equal(-100000);\r\n    });\r\n\r\n    it(\"Skip inițializare rezultat_corect când e deja setat\", () => {\r\n      Ex1.rezultat_corect3 = 999;\r\n      const [a, b] = myObj.rezolvare(2, 1, 3);\r\n      myObj.verificare(2, 1, 3, a, b);\r\n    });\r\n\r\n    it(\"Activează logica de inițializare rezultat_corect\", () => {\r\n      Ex1.rezultat_corect3 = -100000;\r\n      myObj.verificare(2, 1, 3, 5, 2);\r\n      expect(Ex1.rezultat_corect3).to.equal(5);\r\n      expect(Ex1.rezultat_corect2).to.equal(5);\r\n      expect(Ex1.rezultat_corect1).to.equal(5);\r\n    });\r\n  });\r\n\r\n  describe(\"Răspunsuri corecte și greșite\", function () {\r\n    it(\"Răspuns corect: a === a_corect și b === b_corect\", () => {\r\n      const [a, b] = myObj.rezolvare(2, 1, 3);\r\n      const result = myObj.verificare(2, 1, 3, a, b);\r\n      expect(result).to.equal(\"Răspuns corect!\");\r\n    });\r\n\r\n    it(\"Răspuns greșit: a, b greșite → ramura else\", () => {\r\n      Ex1.rezultat_corect1 = 1;\r\n      Ex1.rezultat_corect2 = 2;\r\n      Ex1.rezultat_corect3 = 3;\r\n      Ex1.count = 1;\r\n      const result = myObj.verificare(2, 1, 3, 0, 0);\r\n      expect(result).to.include(\"Răspuns greșit\");\r\n    });\r\n\r\n    it(\"Răspuns greșit cu count sub 3 → încurajează să mai încerce\", () => {\r\n      Ex1.count = 0;\r\n      Ex1.rezultat_corect1 = 7;\r\n      Ex1.rezultat_corect2 = 7;\r\n      Ex1.rezultat_corect3 = 7;\r\n      const result = myObj.verificare(2, 1, 3, 0, 0);\r\n      expect(result).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n    });\r\n\r\n    it(\"Depășește 3 încercări → returnează răspunsul corect\", () => {\r\n      Ex1.count = 3;\r\n      Ex1.rezultat_corect1 = 5;\r\n      Ex1.rezultat_corect2 = 5;\r\n      Ex1.rezultat_corect3 = 5;\r\n      const result = myObj.verificare(2, 1, 3, 0, 0);\r\n      expect(result).to.include(\"Rezultatul corect este\");\r\n    });\r\n\r\n    it(\"Verificare cu input invalid → returnează mesajul de eroare\", () => {\r\n      const result = myObj.verificare(1, 1, 2, 0, 0);\r\n      expect(result).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n    });\r\n  });\r\n\r\n  describe(\" Combinații corecte/greșite a/b\", function () {\r\n    it(\"a greșit, b corect\", () => {\r\n      const [a_corect, b_corect] = myObj.rezolvare(2, 1, 3);\r\n      const result = myObj.verificare(2, 1, 3, a_corect + 1, b_corect);\r\n      expect(result).to.include(\"Răspuns greșit\");\r\n    });\r\n\r\n    it(\"a corect, b greșit\", () => {\r\n      Ex1.count = 0;\r\n      const [a_corect, b_corect] = myObj.rezolvare(2, 1, 3);\r\n      const result = myObj.verificare(2, 1, 3, a_corect, b_corect + 1);\r\n      expect(result).to.include(\"Răspuns greșit\");\r\n    });\r\n  });\r\n\r\n  describe(\" Condiții din metoda `rezolvare`\", function () {\r\n    const invalid = [\"input invalid\", null];\r\n\r\n    it(\"Condiția c < 2 - true și false\", () => {\r\n      expect(myObj.rezolvare(1, 1, 4)).to.deep.equal(invalid);\r\n      expect(myObj.rezolvare(2, 1, 4)).to.deep.equal([7, 3]);\r\n    });\r\n\r\n    it(\"Condiția d <= r - true și false\", () => {\r\n      expect(myObj.rezolvare(3, 3, 2)).to.deep.equal(invalid);\r\n      expect(myObj.rezolvare(3, 1, 5)).to.deep.equal([7, 2]);\r\n    });\r\n\r\n    it(\"Condiția r < 0 - true și false\", () => {\r\n      expect(myObj.rezolvare(3, -1, 5)).to.deep.equal(invalid);\r\n      expect(myObj.rezolvare(4, 0, 6)).to.deep.equal([8, 2]);\r\n    });\r\n\r\n    it(\"Condiția (d - r) % (c - 1) !== 0 - true și false\", () => {\r\n      expect(myObj.rezolvare(4, 1, 8)).to.deep.equal(invalid);\r\n      expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n    });\r\n\r\n    it(\"Condiția d / c <= r - true și false\", () => {\r\n      expect(myObj.rezolvare(3, 6, 8)).to.deep.equal(invalid);\r\n      expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n    });\r\n\r\n    it(\"Condiția d === r → invalid\", () => {\r\n      expect(myObj.rezolvare(3, 2, 2)).to.deep.equal(invalid);\r\n    });\r\n\r\n    it(\"Condiția c === 2 → valid\", () => {\r\n      expect(myObj.rezolvare(2, 1, 3)).to.deep.equal([5, 2]);\r\n    });\r\n  });\r\n\r\n  describe(\"Verificări count și rezultate egale\", function () {\r\n    const runVerificareAndExpectCount = (r1, r2, r3, initialCount = 0, expectedCount = 1) => {\r\n      Ex1.count = initialCount;\r\n      Ex1.rezultat_corect1 = r1;\r\n      Ex1.rezultat_corect2 = r2;\r\n      Ex1.rezultat_corect3 = r3;\r\n      myObj.verificare(2, 1, 3, 0, 0);\r\n      expect(Ex1.count).to.equal(expectedCount);\r\n    };\r\n\r\n    it(\"Ex1.count !== 1 este true\", () => runVerificareAndExpectCount(1, 2, 3));\r\n    it(\"Ex1.count !== 1 este false\", () => runVerificareAndExpectCount(1, 2, 3, 1, 1));\r\n    it(\"Toate rezultate egale\", () => runVerificareAndExpectCount(7, 7, 7));\r\n    it(\"Două rezultate egale, unul diferit\", () => runVerificareAndExpectCount(7, 7, 8));\r\n    it(\"Toate rezultate diferite\", () => runVerificareAndExpectCount(1, 2, 3));\r\n  });\r\n  it(\"Ucide mutantul: if (c < 2) -> false (test izolat, clar și direct)\", () => {\r\n    expect(myObj.rezolvare(1, 2, 4)).to.deep.equal([\"input invalid\", null]); // invalid pentru c < 2\r\n    expect(myObj.rezolvare(3, 1, 5)).to.not.deep.equal([\"input invalid\", null]); // valid când toate condițiile trec\r\n  });\r\n});\r\n\r\ndescribe(\"Ucidem mutantii supravietuitori\", function () {\r\n  const myObj = new Ex1();\r\n  //  Validări de condiții din `rezolvare`\r\n  describe(\"Validări în metoda rezolvare\", () => {\r\n    const cazuri = [\r\n      { label: \"c < 2\", input: [1, 1, 3] },\r\n      { label: \"d <= r (d === r)\", input: [3, 5, 5] },\r\n      { label: \"d <= r (d < r)\", input: [3, 6, 5] },\r\n      { label: \"condiție trecută, dar alt validator blochează\", input: [2, 3, 2] },\r\n    ];\r\n\r\n    cazuri.forEach(({ label, input }) => {\r\n      it(`Ucide mutantul: ${label}`, () => {\r\n        expect(myObj.rezolvare(...input)).to.deep.equal([\"input invalid\", null]);\r\n      });\r\n    });\r\n  });\r\n\r\n  //  Teste pentru fallback destructurare ([], [null, null], undefined)\r\n  describe(\"Fallback destructurare invalidă\", () => {\r\n    const fallbackCases = [\r\n      { label: \"fallback []\", method: \"verificare\", args: [0, 0, 0, 0, 0] },\r\n      { label: \"fallback [null, null] destructurare\", method: \"verificare\", args: [1, 1, 1, 0, 0] },\r\n      { label: \"fără fallback explicit (undefined)\", method: \"verificare\", args: [undefined, undefined, undefined, 0, 0] },\r\n      { label: \"fallback [] direct\", method: \"rezolvare\", args: [0, 0, 0], expectTuple: true }\r\n    ];\r\n\r\n    fallbackCases.forEach(({ label, method, args, expectTuple }) => {\r\n      it(`Ucide fallback-ul: ${label}`, () => {\r\n        const result = myObj[method](...args);\r\n        if (expectTuple) {\r\n          const [a, b] = result;\r\n          expect(a).to.equal(\"input invalid\");\r\n          expect(b).to.equal(null);\r\n        } else {\r\n          expect(result).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  //  Validări legate de count și rezultat_corect\r\n  describe(\"Verificări count și rezultate corecte\", () => {\r\n    const cazuriEgalitate = [\r\n      { label: \"toate egale\", r1: 9, r2: 9, r3: 9 },\r\n      { label: \"primele 2 egale\", r1: 5, r2: 5, r3: 6 },\r\n      { label: \"ultimele 2 egale\", r1: 8, r2: 9, r3: 9 },\r\n      { label: \"toate diferite\", r1: 1, r2: 2, r3: 3 },\r\n      { label: \"doar r1 === r2\", r1: 7, r2: 7, r3: 9 },\r\n    ];\r\n\r\n    cazuriEgalitate.forEach(({ label, r1, r2, r3 }) => {\r\n      it(`Ucide mutant egalitate: ${label}`, () => {\r\n        Ex1.rezultat_corect1 = r1;\r\n        Ex1.rezultat_corect2 = r2;\r\n        Ex1.rezultat_corect3 = r3;\r\n        Ex1.count = 0;\r\n        myObj.verificare(2, 1, 3, 0, 0);\r\n        expect(Ex1.count).to.equal(1);\r\n      });\r\n    });\r\n\r\n    it(\"Ucide mutantul: count !== 1 (inițializare)\", () => {\r\n      Ex1.count = 0;\r\n      myObj.verificare(2, 1, 3, 0, 0);\r\n      expect(Ex1.count).to.equal(1);\r\n    });\r\n\r\n    it(\"Ucide mutantul: count !== 1 (crește de la 2 la 3)\", () => {\r\n      Ex1.count = 2;\r\n      myObj.verificare(2, 1, 3, 0, 0);\r\n      expect(Ex1.count).to.equal(3);\r\n    });\r\n\r\n    it(\"Ucide mutantul: count === 1, NU trebuie să modifice count\", () => {\r\n      Ex1.count = 1;\r\n      Ex1.rezultat_corect1 = 4;\r\n      Ex1.rezultat_corect2 = 5;\r\n      Ex1.rezultat_corect3 = 6;\r\n      myObj.verificare(2, 1, 3, 0, 0);\r\n      expect(Ex1.count).to.equal(1);\r\n    });\r\n\r\n    it(\"Ucide mutantul: count === 1, ramura else (cu mesaj)\", () => {\r\n      Ex1.count = 1;\r\n      Ex1.rezultat_corect1 = 1;\r\n      Ex1.rezultat_corect2 = 2;\r\n      Ex1.rezultat_corect3 = 3;\r\n      const result = myObj.verificare(2, 1, 3, 0, 0);\r\n      expect(result).to.include(\"Mai încearcă\");\r\n    });\r\n  });\r\n\r\n  //  Inițializare rezultat_corect - verificare că NU se reinitializează\r\n  it(\"Ucide mutantul: rezultat_corect3 < 0 → nu se reinitializează dacă e deja 0\", () => {\r\n    Ex1.rezultat_corect1 = 0;\r\n    Ex1.rezultat_corect2 = 0;\r\n    Ex1.rezultat_corect3 = 0;\r\n    const [a, b] = myObj.rezolvare(2, 1, 3);\r\n    myObj.verificare(2, 1, 3, a, b);\r\n    expect(Ex1.rezultat_corect3).to.equal(0);\r\n  });\r\n  it(\"Ucide mutantul NoCoverage: fallback [] vs [null, null]\", () => {\r\n    myObj.rezolvare = () => []; // simulăm cazul mutantului\r\n    const result = myObj.verificare(2, 1, 3, 0, 0);\r\n    expect(result).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n  \r\n    // ✅ restaurăm metoda originală\r\n    myObj.rezolvare = Ex1.prototype.rezolvare;\r\n  });\r\n  it(\"Ucide mutantul: verificare fallback la [null, null] dacă rezultat invalid\", () => {\r\n    myObj.rezolvare = () => [1]; // doar un element → NU trece condiția `.length === 2`\r\n    const result = myObj.verificare(2, 1, 3, 0, 0);\r\n    expect(result).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n  \r\n    myObj.rezolvare = Ex1.prototype.rezolvare; // restaurăm!\r\n  });\r\n  it(\"Ucide mutantul: toate 3 rezultate corecte egale\", () => {\r\n    Ex1.count = 0;\r\n    Ex1.rezultat_corect1 = 5;\r\n    Ex1.rezultat_corect2 = 5;\r\n    Ex1.rezultat_corect3 = 5;\r\n  \r\n    myObj.verificare(2, 1, 3, 0, 0);\r\n  \r\n    expect(Ex1.count).to.equal(1); // count crește → mutant omorât\r\n  });\r\n  it(\"Ucide mutantul: count === 1 → nu se modifică\", () => {\r\n    Ex1.count = 1;\r\n    Ex1.rezultat_corect1 = 1;\r\n    Ex1.rezultat_corect2 = 2;\r\n    Ex1.rezultat_corect3 = 3;\r\n  \r\n    myObj.verificare(2, 1, 3, 0, 0);\r\n  \r\n    expect(Ex1.count).to.equal(1); // dacă se schimbă, e greșit!\r\n  });\r\n  it(\"Fallback destructurare funcționează corect → returnează mesaj de eroare\", () => {\r\n    // ✅ Salvăm metoda originală\r\n    const original = myObj.rezolvare;\r\n\r\n    // 🧟 Simulăm un caz invalid (rezolvare returnează undefined)\r\n    myObj.rezolvare = () => undefined;\r\n\r\n    const result = myObj.verificare(2, 1, 3, 0, 0);\r\n\r\n    // 🔥 Așteptăm exact mesajul ăsta dacă fallback-ul e corect [null, null]\r\n    expect(result).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n\r\n    // ♻️ Restaurăm metoda originală\r\n    myObj.rezolvare = original;\r\n  });\r\n it(\"Ucide fallback-ul destructurare: nu e array valid\", () => {\r\n  const original = myObj.rezolvare;\r\n\r\n  myObj.rezolvare = () => \"not an array\"; // forțăm fallback\r\n\r\n  const rezultat = myObj.verificare(2, 1, 3, 0, 0);\r\n\r\n  expect(rezultat).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n\r\n  myObj.rezolvare = original;\r\n});\r\n////////////////////////////////////////////////////////////////\r\nit(\"Ucide mutantul: if (c < 2) → false (adică codul continuă greșit în loc să se oprească)\", () => {\r\n  const rezultat = myObj.rezolvare(1, 0, 2); // c = 1 => trebuie să fie invalid!\r\n\r\n  // Verificăm că returnează mesajul de eroare\r\n  expect(rezultat).to.deep.equal([\"input invalid\", null]);\r\n\r\n  // Ne asigurăm că NU se întoarce un rezultat valid ca [a, b]\r\n  expect(Array.isArray(rezultat)).to.be.true;\r\n  expect(rezultat[0]).to.equal(\"input invalid\");\r\n  expect(rezultat[1]).to.equal(null);\r\n\r\n  // 💥 Ne asigurăm că NU apare un rezultat valid din greșeală\r\n  expect(rezultat).to.not.deep.equal([5, 2]);\r\n  expect(rezultat[0]).to.not.be.a(\"number\");\r\n});\r\nit(\"Ucide mutantul: c < 2 → codul trebuie să se oprească imediat\", () => {\r\n  const rezultat = myObj.rezolvare(1, 0, 0); // c < 2 => early return\r\n\r\n  expect(rezultat).to.deep.equal([\"input invalid\", null]);\r\n});\r\n\r\n});  \r\n\r\n"},"spec/testare.mjs":{"tests":[{"id":"91","name":"Testare functionala Respecta toate constrangerile"},{"id":"92","name":"Testare functionala Afiseaza \"input invalid\" (impartire la zero)"},{"id":"93","name":"Testare functionala Afiseaza \"input invalid\" (b nu este natural)"},{"id":"94","name":"Testare functionala Afiseaza \"input invalid\" (rest negativ)"},{"id":"95","name":"Testare functionala Afiseaza \"input invalid\" (b=r)"},{"id":"96","name":"Testare functionala Test frontiera - afiseaza \"input invalid\""},{"id":"97","name":"Testare structurala Respecta toate constrangerile (ramificare stanga)"},{"id":"98","name":"Testare structurala Afiseaza 'input invalid' (c prea mic)"},{"id":"99","name":"Testare structurala Afiseaza 'input invalid' (r negativ)"},{"id":"100","name":"Testare structurala Afiseaza 'input invalid' (d < r)"},{"id":"101","name":"Testare structurala Afiseaza 'input invalid' (impartire neintreaga)"},{"id":"102","name":"Testare structurala Afiseaza 'input invalid' (b = r)"},{"id":"103","name":"Testare structurala Caz adevarat si caz fals - valid vs invalid -conditie C1 (c<2)"},{"id":"104","name":"Testare structurala Caz adevarat si caz fals - valid vs invalid -conditie C2 (d<=r)"},{"id":"105","name":"Testare structurala Caz adevarat si caz fals - valid vs invalid -conditie C3 (r<0)"},{"id":"106","name":"Testare structurala Caz adevarat si caz fals - valid vs invalid -conditie C4 ((d - r) % (c - 1) !== 0)"},{"id":"107","name":"Testare structurala Caz adevarat si caz fals - valid vs invalid -conditie C5 ( d/c <= r)"},{"id":"108","name":"Testare structurala Statement coverage"},{"id":"109","name":"Testare structurala Branch coverage"},{"id":"110","name":"Testare structurala Condition coverage"},{"id":"111","name":"Testare structurala Circuits coverage"}],"source":"import Ex1 from \"../exercitii-test.mjs\";\r\nimport { expect } from \"chai\";\r\n\r\nconst myObj = new Ex1();\r\n\r\ndescribe(\"Testare functionala\", function () {\r\n    // am pus cateva exemple din fiecare clasa, sunt mult mai multe teste\r\n    it(\"Respecta toate constrangerile\", function () {\r\n        expect(myObj.rezolvare(2, 1, 3)).to.deep.equal([5, 2]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (impartire la zero)\", function () {\r\n        expect(myObj.rezolvare(3, 2, 2)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (b nu este natural)\", function () {\r\n        expect(myObj.rezolvare(3, 2, 5)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (rest negativ)\", function () {\r\n        expect(myObj.rezolvare(3, -1, 3)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza \\\"input invalid\\\" (b=r)\", function () {\r\n        expect(myObj.rezolvare(4, 2, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Test frontiera - afiseaza \\\"input invalid\\\"\", function () {\r\n        expect(myObj.rezolvare(1, 2, 4)).to.deep.equal([\"input invalid\", null]);\r\n        expect(myObj.rezolvare(1, 2, 2)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n});\r\n\r\ndescribe(\"Testare structurala\", function () {\r\n    // Acoperire la nivel de instructiune\r\n    it(\"Respecta toate constrangerile (ramificare stanga)\", function () {\r\n        expect(myObj.rezolvare(2, 1, 3)).to.deep.equal([5, 2]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (c prea mic)\", function () {\r\n        expect(myObj.rezolvare(1, 1, 3)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    // Acoperire la nivel de decizie\r\n    it(\"Afiseaza 'input invalid' (r negativ)\", function () {\r\n        expect(myObj.rezolvare(3, -2, 7)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (d < r)\", function () {\r\n        expect(myObj.rezolvare(3, 4, 2)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (impartire neintreaga)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Afiseaza 'input invalid' (b = r)\", function () {\r\n        expect(myObj.rezolvare(3, 6, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    // Acoperire la nivel de conditii (true/false)\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C1 (c<2)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(1, 2, 8)).to.deep.equal([\"input invalid\", null]);\r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C2 (d<=r)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(4, 3, 3)).to.deep.equal([\"input invalid\", null]); \r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C3 (r<0)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(4, -1, 8)).to.deep.equal([\"input invalid\", null]); \r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]); \r\n        expect(myObj.rezolvare(4, -1, 8)).to.deep.equal([\"input invalid\", null]); \r\n\r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C4 ((d - r) % (c - 1) !== 0)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(4, 1, 8)).to.deep.equal([\"input invalid\", null]); \r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n\r\n    });\r\n\r\n    it(\"Caz adevarat si caz fals - valid vs invalid -conditie C5 ( d/c <= r)\", function () {\r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]);\r\n        expect(myObj.rezolvare(3, 6, 8)).to.deep.equal([\"input invalid\", null]); \r\n        expect(myObj.rezolvare(4, 1, 7)).to.deep.equal([9, 2]); \r\n    });\r\n\r\n    //  Acoperire pe instructiuni (statement coverage)\r\n    it(\"Statement coverage\", function () {\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n        expect(myObj.verificare(1, 2, 1, 5, 1)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n        expect(myObj.verificare(4, 1, 7, 9, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n\r\n        // depasire incercari\r\n        const rasp_corect = 9;\r\n        Ex1.rezultat_corect1 = 9;\r\n        Ex1.rezultat_corect2 = 9;\r\n        Ex1.rezultat_corect3 = 9;\r\n        Ex1.count = 3;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Ați depășit numărul maxim de încercări. Rezultatul corect este 9 și 2\");\r\n    });\r\n\r\n    //  Acoperire pe ramuri (branch coverage)\r\n    it(\"Branch coverage\", function () {\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n        expect(myObj.verificare(1, 2, 1, 5, 1)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n        expect(myObj.verificare(4, 1, 7, 9, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n    });\r\n\r\n    //  Acoperire pe conditii individuale (condition coverage)\r\n    it(\"Condition coverage\", function () {\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n        expect(myObj.verificare(1, 2, 1, 5, 1)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n\r\n        // toate conditii de egalitate = true\r\n        Ex1.rezultat_corect1 = 9;\r\n        Ex1.rezultat_corect2 = 9;\r\n        Ex1.rezultat_corect3 = 9;\r\n        Ex1.count = 2;\r\n        myObj.verificare(4, 1, 7, 5, 3);\r\n        expect(Ex1.count).to.equal(3);\r\n\r\n        // toate conditii de egalitate = false\r\n        Ex1.rezultat_corect1 = 5;\r\n        Ex1.rezultat_corect2 = 6;\r\n        Ex1.rezultat_corect3 = 7;\r\n        Ex1.count = 2;\r\n        myObj.verificare(4, 1, 7, 5, 3);\r\n        expect(Ex1.count).to.equal(1);\r\n\r\n        // count >= 2\r\n        Ex1.count = 2;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Ați depășit numărul maxim de încercări. Rezultatul corect este 9 și 2\");\r\n\r\n        // count < 2\r\n        Ex1.count = 1;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n    });\r\n\r\n    //  Acoperire pe circuite complete (circuit/path coverage)\r\n    it(\"Circuits coverage\", function () {\r\n        // circuit 1 - raspuns corect\r\n        // 1, 2, 3, 4, 9, 10\r\n        expect(myObj.verificare(4, 1, 7, 9, 2)).to.equal(\"Răspuns corect!\");\r\n\r\n        // circuit 2 - input invalid\r\n        // 1, 2, 3, 4, 9, 11, 12\r\n        expect(myObj.verificare(1, 2, 1, 0, 0)).to.equal(\"Date invalide! Recitiți restricțiile.\");\r\n\r\n        // circuit 3 - raspuns gresit, count < 3\r\n        // 1, 2, 3, 4, 9, 11, 13, 16, 21\r\n        Ex1.count = 1;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Răspuns greșit! Mai încearcă :)\");\r\n\r\n        // circuit 4 - raspuns gresit, count >= 3\r\n        // 1, 2, 3, 4, 13, 14, 15, 19, 20\r\n        Ex1.rezultat_corect1 = 9;\r\n        Ex1.rezultat_corect2 = 9;\r\n        Ex1.rezultat_corect3 = 9;\r\n        Ex1.count = 3;\r\n        expect(myObj.verificare(4, 1, 7, 5, 3)).to.equal(\"Ați depășit numărul maxim de încercări. Rezultatul corect este 9 și 2\");\r\n    });\r\n\r\n\r\n});\r\n"}},"projectRoot":"C:\\Users\\Dell\\Desktop\\Proiect_TSS","config":{"mutate":["exercitii-test.mjs","!ui.js"],"testRunner":"mocha","mochaOptions":{"spec":["spec/**/*.mjs"]},"reporters":["html","clear-text","progress","json"],"coverageAnalysis":"perTest","allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true,"skipFull":false},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"jest":{"projectType":"custom","enableFindRelatedTests":true}},"framework":{"name":"StrykerJS","version":"8.7.1","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"8.7.1","@stryker-mutator/jest-runner":"8.7.1","mocha":"11.1.0"}}}